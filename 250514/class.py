## random

# import random

# result = random.randint(1, 100)

# while True:
#     user_input = int(input('1부터 100까지 숫자를 입력하세요.'))
#     if user_input > result:
#         print('더 작은 숫자를 입력하세요.')
#     elif user_input < result:
#         print('더 큰 숫자를 입력하세요.')
#     else:
#         print('정답입니다!')
#         break

## -------------------------------------------------------------------

# break, continue는 while과 for에서 모두 쓸 수 있습니다.
# break은 반복문을 중단하는 것이고
# continue는 다음 반복문으로 넘어가는 것입니다.

# for i in range(10):
#     if i == 3:
#         break
#     print(i)

# for i in range(10):
#     if i == 3:
#         continue
#     print(i)

# ## -------------------------------------------------------------------

# # 클래스 - 설계 도면
# # 인스턴스 - 생산품

# # 클래스 내의 변수 - 멤버 또는 애트리뷰트
# # 클래스 내의 함수 - 메서드

# # 자동차!
# # 데이터(멤버, 애트리뷰트) # 클래스 내 변수로 선언됩니다. 이것을 멤버 또는 애트리뷰트라고 합니다.
# #   * 최대 속도
# #   * 최대 탑승객

# # 기능(메서드) # 클래스 내 함수로 선언됩니다. 이것을 메서드라고 합니다.
# #   * 출발
# #   * 정지

# ## -------------------------------------------------------------------

# class Car:
#     # 클래스 변수의 위치
#     max_speed = 300
#     max_people = 5

# modelx = Car()
# print(Car.max_speed)
# print(modelx.max_speed)

# ## -------------------------------------------------------------------

# # 클래스 변수 - 설계 도면에 포함되어야 하는 것
# # 인스턴스 변수 - 생산품에 포함되어야 하는 것

# class Car:
#     # 클래스 변수 위치
#     max_speed = 300
#     max_people = 5

#     def __init__(self, 구매자):
#         # 인스턴스 변수 위치
#         # 'self.변수이름'의 형태
#         self.차구매자 = 구매자

# modela = Car('구매자1')
# modelb = Car('구매자2')

# modela.차구매자
# modelb.차구매자

# ## -------------------------------------------------------------------

# # self의 정체! - self는 해당 인스턴스를 얘기합니다.

# class Car:
#     # 클래스 변수 위치
#     max_speed = 300
#     max_people = 5

#     def __init__(self, 구매자):
#         # 인스턴스 변수 위치
#         # 'self.변수이름'의 형태
#         self.차구매자 = 구매자

# modela = Car('구매자1')
# modelb = Car('구매자2')

# # 인스턴스 변수를 이렇게 넣을 수도 있습니다!
# modela.스마트키 = '키티 스마트키'
# modela.스마트키

# ## -------------------------------------------------------------------

# # self의 정체! - self는 해당 인스턴스를 얘기합니다.

# class Car:
#     # 클래스 변수 위치
#     max_speed = 300
#     max_people = 5

#     def __init__(self, 구매자):
#         # 인스턴스 변수 위치
#         # 'self.변수이름'의 형태
#         self.차구매자 = 구매자

# modela = Car('구매자1')
# modelb = Car('구매자2')

# # 인스턴스 변수를 이렇게 넣을 수도 있습니다!
# modela.스마트키 = '키티 스마트키'
# modela.스마트키 
# # .으로 접근하는 것이 생소하다!? => list나 tuple, dict를 생각하세요. 
# # l.append()로 접근하잖아요?
# # l['append']이렇게 접근하지 않죠.
# # 같은 원리로 modela['스마트키']로 접근하지 않습니다.

# ## -------------------------------------------------------------------

# # 비교해보세요.
# # 초급자의 마음:
# # 클래스가 더 복잡하고 난해하죠?
# # 아니, 굳이 이렇게까지 해야하나요?

# # 항공사, 편명, 좌석번호, 이름, 나이, 짐무게(kg), 마일리지
# data = [
#     ['대한항공', 'KE607', '12A', '김민준', 42, 23, 5280],
#     ['아시아나', 'OZ721', '8C', '이', 29, 18, 3450],
#     ['제주항공', '7C101', '15F', '박지민', 35, 15, 720],
#     ['진에어', 'LJ211', '4D', '최서우미래한별', 51, 27, 8900],
#     ['에어부산', 'BX213', '21B', '정', 24, 12, 1250],
#     ['티웨이', 'TW305', '19E', '강민석', 38, 20, 2760],
#     ['에어서울', 'RS808', '3C', '윤지현', 47, 16, 4320],
#     ['대한항공', 'KE123', '7F', '송', 33, 21, 6780],
#     ['아시아나', 'OZ562', '11D', '장하은별님달빛', 26, 19, 1890],
#     ['제주항공', '7C505', '17B', '황수진', 40, 14, 940]
# ]

# class Passenger:
#     def __init__(self, 항공사, 편명, 좌석번호, 이름, 나이, 짐무게, 마일리지):
#         self.항공사 = 항공사
#         self.편명 = 편명
#         self.좌석번호 = 좌석번호
#         self.이름 = 이름
#         self.나이 = 나이
#         self.짐무게 = 짐무게
#         self.마일리지 = 마일리지

# p1 = Passenger('대한항공', 'KE607', '12A', '김민준', 42, 23, 5280)
# p2 = Passenger('아시아나', 'OZ721', '8C', '이', 29, 18, 3450)
# p3 = Passenger('제주항공', '7C101', '15F', '박지민', 35, 15, 720)

# p1.이름


# # 중급자 입장:
# # 1. 예를 들어서 print로 출력을 했을 때 출력되는 길이가 너무 긴 경우가 있을 수 있어요.
# # 2. 예를 들어 data끼리 더해야 될 때가 있어요.

# # 항공사, 편명, 좌석번호, 이름, 나이, 짐무게(kg), 마일리지
# data = [
#     ['대한항공', 'KE607', '12A', '김민준', 42, 23, 5280],
#     ['아시아나', 'OZ721', '8C', '이', 29, 18, 3450],
#     ['제주항공', '7C101', '15F', '박지민', 35, 15, 720],
#     ['진에어', 'LJ211', '4D', '최서우미래한별', 51, 27, 8900],
#     ['에어부산', 'BX213', '21B', '정', 24, 12, 1250],
#     ['티웨이', 'TW305', '19E', '강민석', 38, 20, 2760],
#     ['에어서울', 'RS808', '3C', '윤지현', 47, 16, 4320],
#     ['대한항공', 'KE123', '7F', '송', 33, 21, 6780],
#     ['아시아나', 'OZ562', '11D', '장하은별님달빛', 26, 19, 1890],
#     ['제주항공', '7C505', '17B', '황수진', 40, 14, 940]
# ]

# data[0] # 1. 수천자 출력할 수도 있는데?
# data[0] + data[1] # 2. 나는 마일리지 더하기를 하고 싶었는데?


# # 중급자가 다음과 같이 해결해요.


# class Passenger:
#     def __init__(self, 항공사, 편명, 좌석번호, 이름, 나이, 짐무게, 마일리지):
#         self.항공사 = 항공사
#         self.편명 = 편명
#         self.좌석번호 = 좌석번호
#         self.이름 = 이름
#         self.나이 = 나이
#         self.짐무게 = 짐무게
#         self.마일리지 = 마일리지

#     def __str__(self):
#         return f'{self.이름}, {self.나이}!!'

#     def __add__(self, next):
#         return self.마일리지 + next.마일리지


# p1 = Passenger('대한항공', 'KE607', '12A', '김민준', 42, 23, 5280)
# p2 = Passenger('아시아나', 'OZ721', '8C', '이', 29, 18, 3450)
# p3 = Passenger('제주항공', '7C101', '15F', '박지민', 35, 15, 720)

# print(p1) # 원하는 정보만 출력한 것입니다.
# p1 + p2 # 마일리지 더한 것입니다.

# ## -------------------------------------------------------------------

# class Dot:

#     def __init__(self, x, y):
#         self.x = x
#         self.y = y

# a = Dot(1, 1)
# b = Dot(2, 2)

# a + b # '+'기호는 Dot에 __add__를 실행합니다!


# class Dot:

#     def __init__(self, x, y):
#         self.x = x
#         self.y = y

#     def __add__(self, next):
#         return self.x + next.x, self.y + next.y

# a = Dot(1, 1)
# b = Dot(2, 2)



# a + b # '+'기호는 a에 __add__를 실행합니다!

# a = 10 # a는 int라는 클래스에 인스턴스 입니다!
# b = 20 # b는 int라는 클래스에 인스턴스 입니다!

# a + b # a인스턴스의 __add__를 실행시킨 결과를 보여주세요!



# class Dot:

#     def __init__(self, x, y):
#         self.x = x
#         self.y = y

#     def __add__(self, next):
#         return [self.x + next.x, self.y + next.y]

#     def __mul__(self, next):
#         return [self.x * next.x , self.y * next.y]

# a = Dot(1, 1)
# b = Dot(2, 2)

# a + b # '+'기호는 a에 __add__를 실행합니다!
# a * b # '*'기호는 a에 __mul__를 실행합니다!



# a = 10 # a는 int라는 클래스에 인스턴스 입니다!
# b = 20 # b는 int라는 클래스에 인스턴스 입니다!

# a + b # a인스턴스의 __add__를 실행시킨 결과를 보여주세요!
# a * b # a인스턴스의 __mul__를 실행시킨 결과를 보여주세요!



# class Dot:

#     def __init__(self, x, y):
#         self.x = x
#         self.y = y

#     def __add__(self, next):
#         return [self.x + next.x, self.y + next.y]

#     def __mul__(self, next):
#         return [self.x * next.x , self.y * next.y]

# a = Dot(1, 1)
# b = Dot(2, 2)

# a + b # '+'기호는 a에 __add__를 실행합니다!
# a * b # '*'기호는 a에 __mul__를 실행합니다!



# a = 10 # a는 int라는 클래스에 인스턴스입니다!
# b = 20 # b는 int라는 클래스에 인스턴스입니다!

# a + b # a인스턴스의 __add__를 실행시킨 결과를 보여주세요!
# a * b # a인스턴스의 __mul__를 실행시킨 결과를 보여주세요!



# class Dot:

#     def __init__(self, x, y):
#         self.x = x
#         self.y = y

#     def __eq__(self, next):
#         return False

# a = Dot(1, 1)
# b = Dot(2, 2)

# a == b # '=='기호는 a에 __eq__를 실행합니다!



# l = [10, 20] # l은 list라는 클래스에 인스턴스입니다!
# ll = [10, 20] # ll은 list라는 클래스에 인스턴스입니다!

# l == ll # l인스턴스의 __eq__를 실행시킨 결과를 보여주세요!



# class Dot:

#     def __init__(self, x, y):
#         self.x = x
#         self.y = y

#     def __eq__(self, next):
#         # return False
#         return self.x == next.x and self.y == next.y

# a = Dot(1, 1)
# b = Dot(1, 2)

# a == b # '=='기호는 a에 __eq__를 실행합니다!



# dir(l) # __add__가 있기 때문에 +가 되는 자료형이라는 것을 알 수 있습니다.



# class Dot:

#     def __init__(self, x, y):
#         self.x = x
#         self.y = y

#     def __str__(self):
#         # return f'<{self.x}, {self.y}>'
#         return 'hello world'

# a = Dot(1, 1)
# b = Dot(2, 2)

# print(a) # print는 a의 __str__을 실행합니다.
# print(b) # print는 a의 __str__을 실행합니다.

## -------------------------------------------------------------------
## -------------------------------------------------------------------
## -------------------------------------------------------------------
## -------------------------------------------------------------------
## -------------------------------------------------------------------